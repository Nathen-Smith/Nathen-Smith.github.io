{"version":3,"sources":["components/skills.js","shared-hooks/useScreenType.js","components/ShowSkills.js","components/Links.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["values","text","rating","before","width","background","active","transition","useScreenType","is3Cols","useMediaQuery","minWidth","is2Cols","is1Cols","ShowSkills","screenType","views","forEach","value","push","once","isVisible","className","style","transform","height","marginBottom","fontSize","fontawesome","library","add","brands","links","link","icon","faGithub","faLinkedin","faEnvelope","LinksRow","marginLeft","marginRight","display","href","animation","animationDelay","color","Links","Layout","margin","padding","App","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dcd02a01.chunk.js","sourcesContent":["const values = [\r\n  {\r\n    text: \"JavaScript\",\r\n    rating: \"Intermediate\",\r\n    before: {width: '0%', background: '#F0DB4F'},\r\n    active: {transition: '3s', background: '#F0DB4F', width: '60%' }\r\n  },\r\n  {\r\n    text: \"Linux\",\r\n    rating: \"Intermediate\",\r\n    before: {width: '0%', background: '#0040AD'},\r\n    active: {transition: '3s', background: '#0040AD', width: '70%' }\r\n  },\r\n  {\r\n    text: \"Go\",\r\n    rating: \"Intermediate\",\r\n    before: {width: '0%', background: '#29BEB0'},\r\n    active: {transition: '3s', background: '#29BEB0', width: '40%' }\r\n  },\r\n  {\r\n    text: \"Python\",\r\n    rating: \"Intermediate\",\r\n    before: {width: '0%', background: '#4B8BBE'},\r\n    active: {transition: '3s', background: '#4B8BBE', width: '65%' }\r\n  },\r\n  {\r\n    text: \"React\",\r\n    rating: \"Intermediate\",\r\n    before: {width: '0%', background: '#61DBFB'},\r\n    active: {transition: '3s', background: '#61DBFB', width: '70%' }\r\n  },\r\n  {\r\n    text: \"SQL (MySQL)\",\r\n    rating: \"Pro\",\r\n    before: {width: '0%', background: '#F29111'},\r\n    active: {transition: '3s', background: '#F29111', width: '85%' }\r\n  },\r\n  {\r\n    text: \"MongoDB\",\r\n    rating: \"Intermediate\",\r\n    before: {width: '0%', background: '#4DB33D'},\r\n    active: {transition: '3s', background: '#4DB33D', width: '55%' }\r\n  },\r\n  {\r\n    text: \"C++\",\r\n    rating: \"Pro\",\r\n    before: {width: '0%', background: '#5E97D0'},\r\n    active: {transition: '3s', background: '#5E97D0', width: '75%' }\r\n  },\r\n  {\r\n    text: \"Github & Gitlab\",\r\n    rating: \"Pro\",\r\n    before: {width: '0%', background: '#e24329'},\r\n    active: {transition: '3s', background: '#e24329', width: '80%' }\r\n  },\r\n];\r\n\r\nexport {values};\r\n\r\n","import { useMediaQuery } from \"react-responsive\";\r\n\r\nconst useScreenType = () => {\r\n  const is3Cols = useMediaQuery({ minWidth: 1440 });\r\n  const is2Cols = useMediaQuery({ minWidth: 1265 });\r\n  const is1Cols = useMediaQuery({ minWidth: 800 });\r\n\r\n  if (is3Cols) {\r\n    return \"3-cols\";\r\n  }\r\n  if (is2Cols) {\r\n    return \"2-cols\";\r\n  }\r\n  if (is1Cols) {\r\n    return \"1-cols\";\r\n  }\r\n\r\n  return \"fullscreen\";\r\n\r\n}\r\n\r\nexport default useScreenType;","import React from 'react';\r\n// import useScreenType from \"react-screentype-hook\";\r\nimport TrackVisibility from 'react-on-screen';\r\nimport {values} from './skills';\r\nimport '../scss/style.scss';\r\nimport useScreenType from \"../shared-hooks/useScreenType\";\r\n\r\nconst ShowSkills = () => {\r\n  const screenType = useScreenType();\r\n  var views = []\r\n  values.forEach((value) => {\r\n    views.push(\r\n        <TrackVisibility once>\r\n        {({isVisible}) => {\r\n          return (\r\n            <div className=\"container\" style={screenType===\"3-cols\"? {} : {transform: 'scaleY(2)',height:'100px', marginBottom:'10px'}}>\r\n              <div className=\"skillbar\">\r\n                <div className=\"skillbar-title\" style={isVisible ? value.active : value.before}>\r\n                  <span style={screenType===\"3-cols\"? {} : {transform: 'scaleY(0.5)',fontSize:'24px'}}>\r\n                    {value.text}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )\r\n        }}\r\n        </TrackVisibility>\r\n    );\r\n  });\r\n  return views;\r\n}\r\n\r\nexport default ShowSkills;","import React from 'react';\r\nimport TrackVisibility from 'react-on-screen';\r\nimport fontawesome from '@fortawesome/fontawesome'\r\n// import useScreenType from \"react-screentype-hook\";\r\nimport brands from '@fortawesome/fontawesome-free-brands'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faGithub, faLinkedin } from '@fortawesome/free-brands-svg-icons'\r\nimport { faEnvelope } from '@fortawesome/free-regular-svg-icons'\r\nimport './links.css';\r\nimport useScreenType from \"../shared-hooks/useScreenType\";\r\n\r\nfontawesome.library.add(brands)\r\n\r\nconst links = [\r\n  {\r\n    link: \"https://github.com/Nathen-Smith\",\r\n    icon: faGithub\r\n  },\r\n  {\r\n    link: \"https://www.linkedin.com/in/nathen-s-324378141\",\r\n    icon: faLinkedin\r\n  },\r\n  {\r\n    link: \"mailto:nathencsmith@gmail.com\",\r\n    icon: faEnvelope\r\n  }\r\n]\r\n\r\nconst LinksRow = ({isVisible}) => {\r\n  return (\r\n    <div style={{marginLeft:'auto', marginRight:'auto', display:'block',width:'320px'}}>\r\n      <a href={links[0].link} >\r\n        <FontAwesomeIcon icon={links[0].icon}\r\n          style={isVisible ? {transform: 'scale(1)',animation: 'bounceIn 1s linear 1',animationDelay: '0.1s',color: 'white', width:'80px', height: '80px', display:'inline',marginRight:'5px',marginLeft:'5px',transition:'2s'} : {color: '#292c33', width:'80px', height: '80px', display:'inline',marginRight:'5px',marginLeft:'5px'}}\r\n        />\r\n      </a>\r\n      <a href={links[1].link} >\r\n        <FontAwesomeIcon icon={links[1].icon}\r\n          style={isVisible ? {transform: 'scale(1)',animation: 'bounceIn 1s linear 1',animationDelay: '0.1s',color: 'white', width:'80px', height: '80px', display:'inline',marginRight:'30px',marginLeft:'30px',transition:'2s'} : {color: '#292c33', width:'80px', height: '80px', display:'inline',marginRight:'30px',marginLeft:'30px'}}\r\n        />\r\n      </a>\r\n      <a href={links[2].link} >\r\n        <FontAwesomeIcon icon={links[2].icon}\r\n          style={isVisible ? {transform: 'scale(1)',animation: 'bounceIn 1s linear 1',animationDelay: '0.1s',color: 'white', width:'80px', height: '80px', display:'inline',marginRight:'5px',marginLeft:'5px',transition:'2s'} : {color: '#292c33', width:'80px', height: '80px', display:'inline',marginRight:'5px',marginLeft:'5px'}}\r\n        />\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Links = () => {\r\n  const screenType = useScreenType();\r\n  if (screenType === \"3-cols\") {\r\n    return (\r\n      <TrackVisibility once>\r\n        <LinksRow />      \r\n      </TrackVisibility>\r\n    )\r\n  }\r\n  if (screenType === \"fullscreen\" || screenType === \"1-cols\" || screenType === \"2-cols\") {\r\n    let views = []\r\n    links.forEach((link) => {\r\n      views.push(\r\n        <TrackVisibility once>\r\n          {({isVisible}) => {\r\n            return (\r\n              <a href={link.link} >\r\n                <FontAwesomeIcon icon={link.icon}\r\n                  style={isVisible ? {transform: 'scale(1)',animation: 'bounceIn 1s linear 1',animationDelay: '0.1s',color: 'white', width:'160px', height: '160px', display:'block',marginRight:'auto',marginLeft:'auto',marginBottom:'5px',transition:'2s'} : {color: '#292c33', width:'160px', height: '160px', display:'block',marginRight:'auto',marginLeft:'auto',marginBottom:'5px'}}\r\n                />\r\n              </a>\r\n            )\r\n          }}\r\n        </TrackVisibility>\r\n      );\r\n    });\r\n    return views;\r\n    \r\n  }\r\n\r\n}\r\n\r\nexport default Links;","import React from 'react';\r\nimport ShowSkills from './components/ShowSkills'\r\nimport Links from './components/Links'\r\nimport fontawesome from '@fortawesome/fontawesome'\r\nimport brands from '@fortawesome/fontawesome-free-brands'\r\n// import useScreenType from \"react-screentype-hook\";\r\nimport useScreenType from \"./shared-hooks/useScreenType\";\r\nimport './scss/style.scss'\r\n\r\nfontawesome.library.add(brands)\r\n\r\nconst Layout = () => {\r\n  const screenType = useScreenType();\r\n  if (screenType === \"3-cols\") {\r\n    return (\r\n      <div>\r\n        <h1 style={{fontSize:'60px'}}>Hi.</h1>\r\n        <h2 style={{}}>I'm Nathen Smith.</h2>\r\n        <p style={{height:'1000px'}}>Scroll down:)</p>\r\n        <div style={{width:'50%',margin:'auto',padding:'10px'}}>\r\n          <ShowSkills />\r\n          <div style={{display:'block'}}>\r\n            <Links />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  } \r\n  return (\r\n    <div>\r\n      <h1 style={{fontSize:'120px'}}>Hi.</h1>\r\n      <h2>I'm Nathen Smith.</h2>\r\n      <h3 style={{height:'1000px'}}>Scroll down:)</h3>\r\n      <div style={{margin:'auto',padding:'32px'}}>\r\n        <ShowSkills />\r\n        <Links />\r\n      </div>\r\n    </div> \r\n  );\r\n\r\n}\r\n\r\nconst App = () => {\r\n  return (\r\n    <div style={{background:'#292c33'}}>\r\n      <Layout />\r\n      <br/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}