{"version":3,"sources":["components/skills.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["values","text","rating","before","width","background","active","transition","ComponentToTrack","isVisible","screenType","useScreenType","map","value","i","style","isMobile","className","color","visibility","App","fontSize","height","once","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.978bef86.chunk.js","sourcesContent":["const values = [\r\n  {\r\n    text: \"JavaScript\",\r\n    rating: \"Intermediate\",\r\n    before: {width: '0%', background: '#F0DB4F'},\r\n    active: {transition: '3s', background: '#F0DB4F', width: '60%' }\r\n  },\r\n  {\r\n    text: \"Linux\",\r\n    rating: \"Intermediate\",\r\n    before: {width: '0%', background: '#333333'},\r\n    active: {transition: '3s', background: '#333333', width: '70%' }\r\n  },\r\n  {\r\n    text: \"Go\",\r\n    rating: \"Intermediate\",\r\n    before: {width: '0%', background: '#29BEB0'},\r\n    active: {transition: '3s', background: '#29BEB0', width: '40%' }\r\n  },\r\n  {\r\n    text: \"Python\",\r\n    rating: \"Intermediate\",\r\n    before: {width: '0%', background: '#4B8BBE'},\r\n    active: {transition: '3s', background: '#4B8BBE', width: '65%' }\r\n  },\r\n  {\r\n    text: \"React\",\r\n    rating: \"Intermediate\",\r\n    before: {width: '0%', background: '#61DBFB'},\r\n    active: {transition: '3s', background: '#61DBFB', width: '70%' }\r\n  },\r\n  {\r\n    text: \"SQL\",\r\n    rating: \"Pro\",\r\n    before: {width: '0%', background: '#F29111'},\r\n    active: {transition: '3s', background: '#F29111', width: '85%' }\r\n  },\r\n  {\r\n    text: \"MongoDB\",\r\n    rating: \"Intermediate\",\r\n    before: {width: '0%', background: '#4DB33D'},\r\n    active: {transition: '3s', background: '#4DB33D', width: '55%' }\r\n  },\r\n  {\r\n    text: \"C++\",\r\n    rating: \"Pro\",\r\n    before: {width: '0%', background: '#5E97D0'},\r\n    active: {transition: '3s', background: '#5E97D0', width: '75%' }\r\n  },\r\n  {\r\n    text: \"Github & Gitlab\",\r\n    rating: \"Pro\",\r\n    before: {width: '0%', background: '#e24329'},\r\n    active: {transition: '3s', background: '#e24329', width: '80%' }\r\n  },\r\n];\r\n\r\nexport {values};\r\n\r\n","import React from 'react';\r\nimport TrackVisibility from 'react-on-screen';\r\nimport './scss/style.scss';\r\nimport useScreenType from \"react-screentype-hook\";\r\nimport {values} from './components/skills'\r\n\r\n\r\nconst ComponentToTrack = ({ isVisible }) => {\r\n  // var style = {}\r\n  const screenType = useScreenType();\r\n\r\n  return (\r\n    \r\n    <div>{values.map((value, i)=> \r\n      <div style={screenType.isMobile ? {width:'100%'} : {width:'50%'}}>\r\n      <div className=\"skillbar\" >\r\n        <div key={i} className=\"skillbar-title\" style={isVisible ? value.active : value.before}>\r\n          <span>\r\n            {value.text}\r\n          </span>\r\n        </div>\r\n        <div className=\"skill-bar-percent\"\r\n         style={isVisible ? {transition:'3s linear',color:'black',visibility:'visible'}:{}}\r\n         >\r\n          {value.rating}\r\n        </div>\r\n      </div>\r\n      </div>\r\n    )}</div>\r\n  ) \r\n}\r\n\r\nconst App = () => {\r\n  return (\r\n    <div style={{background:'#292c33'}}>\r\n      <h1 style={{fontSize:'60px'}}>Hi.</h1>\r\n      <h2>I'm Nathen Smith.</h2>\r\n      <h3 style={{height:'1000px'}}>Scroll down to see skills</h3>\r\n      <TrackVisibility once>\r\n        <ComponentToTrack />\r\n      </TrackVisibility>\r\n      <h2 style={{height:\"100px\"}}>epic</h2>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}